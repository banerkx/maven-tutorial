<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.jetbrains.marco</groupId>
  <artifactId>maven-tutorial</artifactId>
  <version>1.0-SNAPSHOT</version>

  <scm>
<!-- See: https://maven.apache.org/maven-release/maven-release-plugin/ -->
<!-- To do a dry run, use: -->
<!--     mvn release:prepare -DdryRun -->
<!-- You will be prompted with the following 3 questions: -->
<!--     What is the release version for "maven-tutorial"? (maven-tutorial) 1.0: : -->
<!--     What is the SCM release tag or label for "maven-tutorial"? (maven-tutorial) maven-tutorial: -->
<!--     What is the new development version for "maven-tutorial"? (maven-tutorial) 1.1-SNAPSHOT: -->
<!-- To accept the default values presented automatically, use: -->
<!--   echo -e '\n\n\n' | mvn release:prepare -DdryRun -->
<!--                   OR -->
<!--   mvn [dash][dash]batch-mode release:prepare -DdryRun -->
<!--     To check if there are any changes in the repository, use: -->
<!--     git status [dash][dash]porcelain=1 | wc -l # if the line count is > 0, there are changes (includes both staged and unstaged) -->
<!--     git  diff [dash][dash]exit-code > /dev/null 2>&amp;1 # if exit code != 0, there are unstaged changes  -->
<!-- The dry run will create the files: -->
<!--     pom.xml.next -->
<!--     pom.xml.releaseBackup -->
<!--     pom.xml.tag -->
<!--     release.properties -->
<!-- To clean up after a failed release or a dry run, use: -->
<!--     mvn release:clean -->
<!-- ** This goal is performed automatically after a successful release. ** -->
<!-- For use with the maven release plugin. -->
<!-- <connection> gives read access -->
<!-- <developerConnection> gives read/write access -->
<!-- The gitlab CI/CD pre-defined environment variable CI_PROJECT_URL=https://gitlab.com/banerkx/git_template -->
<!-- So reading in this pre-defined variable from the environment to get the project url. -->
<!--     <developerConnection>scm:git:${env.CI_PROJECT_URL}</developerConnection> -->
    <developerConnection>scm:git:https://gitlab.com/banerkx/maven-tutorial.git</developerConnection>
    <tag>@{project.version}</tag>
  </scm>

  <properties>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <junit.version>5.8.2</junit.version>
  </properties>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.22.2</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>3.0.1</version>
        <configuration>
          <tagNameFormat>@{project.version}</tagNameFormat>
<!-- Do not want the maven plugin to fail if the following files are modified: -->
          <checkModificationExcludes>
            <checkModificationExclude>pom.xml</checkModificationExclude>
          </checkModificationExcludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
<!-- Use: -->
<!--     mvn validate -->
            <phase>validate</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <echo>project.scm.developerConnection = [${project.scm.developerConnection}]</echo>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.8.2.0</version>
        <configuration>
          <includeFilterFile>spotbugs-security-include.xml</includeFilterFile>
          <excludeFilterFile>spotbugs-security-exclude.xml</excludeFilterFile>
          <plugins>
            <plugin>
              <groupId>com.h3xstream.findsecbugs</groupId>
              <artifactId>findsecbugs-plugin</artifactId>
              <version>1.12.0</version>
            </plugin>
          </plugins>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>com.mpatric</groupId>
      <artifactId>mp3agic</artifactId>
      <version>0.9.1</version>
    </dependency>
<!-- Only needed to run tests in a version of IntelliJ IDEA that bundles older versions -->
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <version>1.8.2</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.apiguardian</groupId>
          <artifactId>apiguardian-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.apiguardian</groupId>
          <artifactId>apiguardian-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.apiguardian</groupId>
          <artifactId>apiguardian-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

</project>

